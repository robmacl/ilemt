
Todo:
 -- Any effect of sensor cable foil shield on the measurement?
 -- Test RxRy fixture accuracy
 -- Mag shield for input cards
 -- Try coupling offset calibration (within-box coupling)
 -- Visualize/test fields generated by forward kinematics



 

[6 May 21]

I got one of the Premo sensors wired up, and getting the fixture post
fabricated.

I need a better understanding of the kinematics of error in the RxRy fixture.

The point of the mechanical alignment procedures is to try to make sure that
the stage kinematics is correct.  So Rz needs to intersect RxRy, etc.  The
sensor fixture pose then allows for the sensor to have an arbitrary pose wrt. the
stage.

But mechanical imprecision in the two mount points creates error.  In addition
to non-squareness causing non-intersection of the axes, translation error also
matters.  One way to model this would be as a sequential link between each of
the rotation axes.  If this includes rotation, then we can even model
non-orthogonality of the mechanical axes.  From the viewpoint of calibration,
this would amount to a more precise kinematics of the stage.

Non-square cross-section of the post or of the mount points also causes non-90
degree rotation, which would not be absorbed into link moments.

First, I would try testing how much of a problem this is, which can be done
mechanically.  All this kinematics seems like a lot of work, and also
absorbing even more DOF into discarded fixture effects seems like it could
absorb real errors.

One possibly test fixture would be a post with a pin sticking out sideways
along what is supposed to be the axis.  I guess you would need to shim the
base of the post to bring in the height to match the actual distance to the
center of rotation.  Can also test parallelism with the translation axes by
reading off the post, and off a square side arm.  OFC this is only an accurate
test insofar is the testing fixture is accurate.  This fixture could be
metal.  Tests for the relative pose of the two mount points can be done with
the sensor mount removed from the stage.

Probably the best way to tune the sensor mount fixture would be to make the
new test fixture, then make the mount agree with it by tweaking in the mount
points.  This potentially solves the height adustment problem, although
tweaking in all the critical faces without going too far is surely tricky.
Perhaps make a new mount rather than tweaking the old one.  I guess finish one
mount, then use the test fixture to bring in the other wrt. to it.

What is the magnitude of the effect of fixture error?  Angular error in the
mount points converts directly to angular error.  Angular error converts to
translation error according to the moment, which is mainly of a concern for
the post height.  This error is basically the non-intersection of the axes.
The moment is the post height, which is only 40mm or so.

What happens with angular errors at the sensor, eg. non-90 degree?  Does this
only affect the angular measurement? Aside from the actual mechanical effect,
there is some rotation->translation coupling in the pose solution itself, but
this effect should be small, so should be very small for a small angular
error.  At least at this point, we mainly want to test and reduce the
rotation->translation coupling seen for large rotations, whether this is
intrinsic in the tracker, or from stage kinematic error.

Looking at the error vectors, there seems to be something like a scale factor
error in Z, where at both + and - Z, the error vectors point inward.  For the
Y effect on error, this mainly seems to be increased magnitude and Rz
coupling, without any clear Y bias at any given point.


I tested the mutual inductance of my cube coil, and also the biggest premo
coil, using the inductance bridge and the shorting method.  Seems to be well
below 1e-3.  I expected higher, 1% or more, especially for my prototype coil.
I think a more sensitive test, especially for the source coil, is to drive in
a current, and then measure the short circuit current on the other axes.  I
could not see any null deflection with my coil, and there was only a just
noticeable deflection with the premo coils.



[4 May 21]

cal_5_3, ILEMT box, with capacitors ripped out.  Cal residue 3-e3.  Was like 4e-4 with Z-only.
________________________________________________________________
                d_source_pos                          d_source_moment                            d_sensor_pos                             d_sensor_moment           
    _____________________________________    __________________________________    ________________________________________    _____________________________________

      0.04597    -0.0010398             0    -0.91124    0.0041408            0      0.013859    -0.00029482              0        -0.18    -0.0029284             0
     0.002147      0.046098             0           0      0.93629            0    0.00018832       0.013518              0            0       0.17954             0
    -0.044444     -0.042867             0    0.030529      0.01112            1     -0.013818      -0.013672              0    0.0028949     0.0010959       0.17915

Source fix: [0.24980 0.02781 -0.03732 0.01354 0.01814 -1.56220 ]
Sensor fix: [0.00004 -0.00003 0.01375 0.00648 -0.00584 1.55604 ]

>> check_poses
data_file = 'Z_rot_ld.dat'
cal_file = 'XYZ_hr_cal.mat'

source_fix_delta =
  -1.0171e-05  -9.4135e-05   4.5581e-05  -0.00062529  -0.00091866     0.001284

sensor_fix_delta =
   9.4835e-05  -8.1182e-06   0.00027099    0.0032535  -7.0148e-05   -0.0035989

Position error (m): 4.14e-04 RMS, 1.43e-03 max.
Orientation error (radians): 3.52e-03 RMS, 1.06e-02 max

trans_err_rms =
   0.00015049   0.00025076   0.00029233

rot_err_rms =
    0.0015903    0.0017429    0.0026125
________________________________________________________________


Woot!  Error is greatly improved, and at 400 um RMS position error, we are
arguably within 2x of our 200 um goal.  (No longer recall whether we said RMS
or max.)  This is with only one fixturing, and will surely be worse with the
three rotations.  We may be nearing the level where ground truth inaccuracy
becomes an issue.

The calibration is somewhat prettier.  The sensor orthogonality is improved
about 2x.  Also, the sensor moment is 0.4x what it was.  This is somewhat
puzzling.  This must have been a gain boost from sensor resonance (which would
have also increased the sensor coil coupling).

Interesting that the source orthogonality is *not* way better compared to the
UR44 setup, even though that did not have off-axis compensation.  But there is
presumably actual non-orthogonality, or at least misalignment which can be
modelled as dipole, so minimizing off-axis terms is only something that is
"pretty". 


This is the "quadrupole" calibration:
________________________________________________________________

               d_source_pos                          d_source_moment                            d_sensor_pos                             d_sensor_moment           
    _____________________________________    __________________________________    ________________________________________    _____________________________________

      0.04597    -0.0010398             0    -0.91124    0.0041408            0      0.013859    -0.00029482              0        -0.18    -0.0029284             0
     0.002147      0.046098             0           0      0.93629            0    0.00018832       0.013518              0            0       0.17954             0
    -0.044444     -0.042867             0    0.030529      0.01112            1     -0.013818      -0.013672              0    0.0028949     0.0010959       0.17915

               q_source_pos                             q_source_moment                 q_sensor_pos    q_sensor_moment
    ___________________________________    _________________________________________    ____________    _______________

     0.097235     0.058666     0.058741      0.0022044    -0.00019983    -0.00050782    0    0    0       0    0    0  
     0.013613     0.065094     0.023188     2.5115e-05     -0.0021705    -6.1818e-05    0    0    0       0    0    0  
    -0.034986    -0.037858     0.006016    -0.00099234     0.00010038     -0.0023726    0    0    0       0    0    0  

Source fix: [0.24894 0.02782 -0.03683 0.01573 0.01695 -1.56067 ]
Sensor fix: [0.00004 -0.00003 0.01374 0.00653 -0.00585 1.55605 ]

>> check_poses
data_file = 'Z_rot_ld.dat'
cal_file = 'quadrupole_hr_cal.mat'

source_fix_delta =
  -1.4243e-05  -6.2832e-05    3.873e-05  -0.00072557  -0.00047574    0.0016535

sensor_fix_delta =
   9.6496e-05  -6.7973e-06   0.00026968    0.0032226  -0.00026451   -0.0037471

Position error (m): 4.28e-04 RMS, 1.42e-03 max.
Orientation error (radians): 3.47e-03 RMS, 9.29e-03 max

trans_err_rms =
   0.00015116   0.00026169   0.00030282

rot_err_rms =
    0.0014608    0.0016343    0.0026881
________________________________________________________________

This is a pretty unexciting improvement, translation RMS is actually slightly
worse, but rotation is improved a bit.  Cal residual reduced from 3.06e-3 down
to 2.84e-3.


Stage performace, from:
    http://filter.micron.ri.cmu.edu/wiki/doku.php?id=projects:asap:calibration:stage
________________________________________________________________

On-axis XYZ repeatability seems to be down around 1 um. Off-axis motion will
of course have both translation and rotation components, but it is difficult
to disentangle because any measurement setup has some moment about whatever
center of rotation there is. On the Z axis, X motion seemed to be within +/-5
um. Angular misalignment of the Z axis has been trimmed down to 100
microradians, at which point runout clearly dominates. Realistically it seems
that for runout + axis misalignment you can expect better than 1 milliradian
(1 micron per mm.) The XY orthogonality seems to be 600 microradians, which is
out of spec, and large enough that it could be affecting Micron
calibration. This would be easier to trim in software.
________________________________________________________________


Stage performance hasn't been directly checked since I wrote this in 2013, so
YMMV.  When compared to the current accuracy (400 um/3.5 mrad RMS), this seems
pretty good.  But need to consider pole moment effects and the RxRy fixture
error (Rz misalignment, etc.).  So far as the pole moment goes, the main issue
would be translation error due to translation->rotation coupling in the XYZ,
and Rz angular runout (Rz to Rx or Ry).

As quick check, If we say the moment is 300mm, then 1 mrad error would create
a 300um offset.  This is significant, so we need to get a better handle on
what we are actually seeing.

FWIW, we are currently getting sensor fixture XY offsets of 40 um.  Does this
reflect on the Rz alignment and RxRy fixture accuracy?  It nominally measures
how well the sensor Z moment is centered on the Rz axis (since the Z dipole
position is forced to 0).  It is not in principle a problem if this were
larger, but the small value is suggestive of actual accuracy.


 ==> I found a bug in the quadrupole forward kinematics which made it into a
     dipole; the two component dipoles did not have opposite signs.

Fixing this did not do much at all until I included dipole in the optimization
also.  With this change, we have so far made somewhat more progress on the
residue, but seem to have pretty much hit the wall at 2.7e-3 after 20
iterations.

Even so, the source X quadrupole moment is changing considerably.  Really need
to let it cook without watching too much, since intermediate states often
don't much resemble the final.
 ==> Conceivably the X quadrupole is bigger because we get closest to that
     coil.

Also, the quadrupole moments are kind of on-axis, but sign flipped.  Being
on-axis is what you would expect if this was absorbing the imperfect dipole
approximation of the ideal dipole-approximating coil geometry.  Or a
rotationally symmetric deviation due to the construction details.  The sensor
parameters (dipole only) don't seem to be changing much, so probably could
speed this up by dropping them out, IDK.  The fixture is not really changing
either, so it seems we are mainly trading the dipole and quadrupole terms
(which is what you would expect).  The dipole positions have moved by mm, and
the source fixture XY by 100's of um.

 ==> The X dipole and quadrupole positions have pretty much converged.

At the very least, I should be using the "medium size" data for calibration.
We may not have enough of the right poses to identify the quadrupole terms.
The way that the quadrupole keeps moving, without any significant effect on
the residual, suggests that we have excess DOF (at least given the data that
we have).  Nothing is "running away" that would give a clear indication, the
dipole components just keep creeping.


 ==> OK, the quadrupole optimization stopped after 88 iterations due to
     FunctionTolerance (failure to reduce the residual), residual 2.741e-3

________________________________________________________________
 
              d_source_pos                         d_source_moment                           d_sensor_pos                             d_sensor_moment           
    _____________________________________    ________________________________    ________________________________________    _____________________________________

      0.05127    -0.0020681             0    -0.89832    0.002791           0      0.013869    -0.00028474              0     -0.18096    -0.0029456             0
    0.0030322      0.044304             0           0     0.93925           0    0.00018272       0.013507              0            0       0.18046             0
    -0.044225      -0.04233             0    0.026178    0.011452           1     -0.013804      -0.013647              0    0.0028849     0.0010959       0.18011

               q_source_pos                           q_source_moment               q_sensor_pos    q_sensor_moment
    ___________________________________    _____________________________________    ____________    _______________

     0.055286     0.032516    -0.035511      0.92092    -0.0014976       0.11243    0    0    0       0    0    0  
    0.0030625    0.0077246      0.06798      0.16303      -0.13046       0.14168    0    0    0       0    0    0  
    -0.044637    -0.046113     0.014332    -0.014069      0.015162      -0.34999    0    0    0       0    0    0  

Source fix: [0.24993 0.02716 -0.03640 0.01553 0.01610 -1.56076 ]
Sensor fix: [0.00004 -0.00004 0.01373 0.00647 -0.00577 1.55603 ]

>> check_poses

data_file = 'Z_rot_ld.dat'
cal_file = 'all_hr_cal.mat'

source_fix_delta= 
  -5.1749e-05  -0.00014413   0.00021821   -0.0007071  -2.3414e-05   0.00044831

sensor_fix_delta =
   8.9371e-05   3.6453e-05   6.5274e-05    0.0031705  -0.00047694   -0.0030639

Position error (m): 3.95e-04 RMS, 1.37e-03 max.
Orientation error (radians): 3.19e-03 RMS, 1.23e-02 max

trans_err_rms =
   0.00013962   0.00023496   0.00028487

rot_err_rms =
    0.0013098    0.0014773    0.0025071
________________________________________________________________


So RMS error is modestly reduced, by 4.5% for position and 9.4% for
orientation.  Worst case error is not really helped, but this may be in part
because the calibration data does not cover the full test workspace (for Rz).
In the position error vectors, the pattern that we are worse at -Y is
maintained.  The Z pattern has become fairly symmetrical + and -, but error is
degraded significantly at the edges of the workspace.

The picture of the calibration is pretty similar to the non-final patterns
noted above.  The sensor parameters indeed hardly changed at all.  I can't
make much sense of how widely the quadrupole moments vary across the source
axes.  I am suspicious that we don't have the right calibration data.  The X
quadrupole seems physically plausible because it is largely on-axis and
located very near the dipole.  Well, all of XYZ moments are tend toward the
axis, and are opposite in sign to the dipole.  But the magnitudes are all over
the place, and the locations also seem somewhat random.


I was thinking that we could compensate the within-box out->in coupling by
calibrating an additive offset to the coupling matrix.  But this would
probably need to be a complex coupling because the internal coupling is likely
to be out of phase.  Also, this won't help the interference on the current
sense, eg. for off-axis compensation.  So it seems worthwhile to try magnetic
shielding around the input cards.
 ==> This is linear in the coupling, basically just the mean of the
     calibration residues.

Specificially, convert the predicted coupling back to complex, difference with
the measurement, and then take the mean.  This could be done separately, or
inside the calibrate objective, as an adjustment to the residues (forcing them
to zero mean).



[28-29 Apr 21]


re. working in the +X+Y+Z sector only.  I had thought of changing to the
symmetric diagonal source orientation back when we had identified the -Y
problem with Claudia, but then thought that this would create a problem with
our optimization constraint (currently +X).  True that we wouldn't get a
hemisphere anymore, only a 1/8 sphere.  But this is really fairly OK for our
application, and certainly fine as a temporary measure.

For source coil interfaction effects, it makes sense that operating at
negative coordinates would be worse, since in those poses there is an off-axis
coil between the source and the sensor.  Even with the off-axis current
nulled, there can still be interference due to eddy currents (that are not
along the wire, so are not measured).  *source* coil interaction can't explain
the Rz->XYZ coupling (especially in the Rz fixturing, where we rotate about
the coil axis), but sensor coil interaction might.


Coupling magnitude range:

The lowest norm of couplings in the large Rz data is 0.07 (-23 dB FS).  I had
previous measured the box internal cross coupling at -100 to -110 dB, or
1e-5.  This is about -77 dB wrt the min coupling magnitude, which would seem
to be a pretty good margin, except that this is more like the strongest
coupling in the matrix, rather than the weakest coupling that matters.  Given
that, more investigation would be needed to decide whether internal coupling
is a problem.  Our accuracy goal is around -60 dB (200 um @ 200 mm), so we
would want an error significantly less than -83 dB (-60 + -23).  -17 dB would
count as "significantly less", but given the very rough guess of what errors
matter, this is not conclusive.

There are very few measured couplings (any 3x3 position) which are <1e-3
re. FS.


Results with no off-axis compensation:

Not super confident in reproducibility because of that mysterious problem on
my cal_4_21 data, but in cal_4_28_nocomp the calibration residual is much
worse (4.9 vs 0.03?), and the tested accuracy is also worse.

cal_4_28_nocomp (ILEMT box, no off-axis comp), cal residual 4.9
________________________________________________________________

                  d_source_pos                             d_source_moment                           d_sensor_pos                           d_sensor_moment           
    _________________________________________    ___________________________________    ______________________________________    ____________________________________

       0.051667      0.0014064              0     -0.42598     0.040526            0       0.01434     0.0014069             0    -0.44582     -0.015227             0
    -0.00058553       0.046917              0            0      0.59241            0    8.4354e-06      0.014982             0           0       0.45084             0
      -0.044943      -0.044588              0    -0.017994     0.028224            1     -0.013824     -0.014159             0    0.015306    -0.0011999       0.44842

Source fix: [0.25647 0.01748 -0.02935 0.05066 0.00549 -1.60688 ]
Sensor fix: [0.00050 -0.00060 0.01437 0.01086 -0.00895 1.55384 ]

>> check_poses
source_fix_delta =
  -0.00023895  -0.00019102    0.0010144   -0.0019065    -0.005643   -0.0048901

sensor_fix_delta =
  -0.00032916  -0.00026563  -0.00032751    0.0025511    0.0042774   -0.0091584

Position error (m): 3.68e-03 RMS, 1.88e-02 max.
Orientation error (radians): 3.46e-02 RMS, 1.82e-01 max

trans_err_rms =
    0.0008643    0.0030645    0.0018373


rot_err_rms =
     0.013038     0.014659     0.028471
________________________________________________________________


Compare cal_4_23 (ILEMT box, with off-axis comp):
________________________________________________________________

               d_source_pos                           d_source_moment                             d_sensor_pos                            d_sensor_moment           
    _____________________________________    ____________________________________    ________________________________________    ____________________________________

     0.045587    -0.0014909             0     -0.4458    -0.0018872             0      0.013854    -1.0578e-05              0    -0.44857     -0.015882             0
    0.0025708      0.045895             0           0       0.58478             0    0.00022171       0.013749              0           0        0.4567             0
    -0.045172      -0.04339             0    0.011009     0.0042047             1      -0.01365      -0.013878              0    0.015513    -0.0049256       0.45367

Source fix: [0.24952 0.02950 -0.03737 0.01023 0.01238 -1.55465 ]
Sensor fix: [0.00009 -0.00020 0.01400 0.01996 -0.00422 1.54876 ]

>> check_poses
6 invalid points with residual > 0.0001.

bad_points =
     1     2     3     4     5     6

source_fix_delta =
   6.3395e-05  -4.2176e-05   0.00058952    0.0092933   -0.0060007    0.0039225

sensor_fix_delta =
   -3.043e-05  -0.00015105    0.0012648   -0.0062778   -0.0024586   -0.0063608

Position error (m): 2.35e-03 RMS, 1.19e-02 max.
Orientation error (radians): 2.28e-02 RMS, 1.13e-01 max

trans_err_rms =
   0.00057408    0.0018453    0.0013343

rot_err_rms =
    0.0096424     0.010984     0.017527
________________________________________________________________


cal_3_8 (UR44, no off-axis comp), cal residual 0.013
________________________________________________________________

                 d_source_pos                         d_source_moment                           d_sensor_pos                               d_sensor_moment             
    ______________________________________    ________________________________    ________________________________________    _________________________________________

       0.05073      0.002399             0      0.8922    0.062731           0      0.013907    -0.00033894              0       0.066321     -0.0021671              0
    0.00059686      0.047086             0           0     0.94211           0    9.6469e-05       0.013473              0              0        0.10677              0
     -0.043098     -0.042496             0    0.018888    0.042042           1     -0.013736      -0.013652              0    -0.00090121     0.00069743        0.10348

Source fix: [0.23029 0.00690 -0.03037 0.05172 0.01157 -1.59509 ]
Sensor fix: [0.00024 0.00006 0.01365 0.00598 -0.00761 1.55154 ]

>> check_poses

data_file =
    'Z_rot_ld.dat'

cal_file =
    'XYZ_hr_cal.mat'

source_fix_delta =
  -0.00037969   0.00054463  -9.6689e-05   -0.0062639    0.0012081   -0.0047747

sensor_fix_delta =
   0.00040664   0.00044483  -0.00019332    0.0029617    0.0018488     0.011777

Position error (m): 1.04e-03 RMS, 5.70e-03 max.
Orientation error (radians): 1.23e-02 RMS, 5.15e-02 max

trans_err_rms =
   0.00037492   0.00074372   0.00062078

rot_err_rms =
      0.00495    0.0058604    0.0096272

________________________________________________________________


So accuracy is better with off-axis cal than not using ILEMT box, but the old
UR44 setup is much better than either.

UR44:
Position error (m): 1.04e-03 RMS, 5.70e-03 max.
Orientation error (radians): 1.23e-02 RMS, 5.15e-02 max

ILEMT w/ off-axis:
Position error (m): 2.35e-03 RMS, 1.19e-02 max.
Orientation error (radians): 2.28e-02 RMS, 1.13e-01 max

ILEMT w/o off-axis:
Position error (m): 3.68e-03 RMS, 1.88e-02 max.
Orientation error (radians): 3.46e-02 RMS, 1.82e-01 max


I am strongly suspecting that the ILEMT box problem is increased load on the
sensor, especially the C load.  Would be interesting to measure on the UR44.

See ilemt_hw/docs/notebook.txt [29 Apr 21]


[27 Apr 21]

I collected the small three-fixture cal data again, and now that is basically
working also.  I must have goofed somehow with the cal_4_21 data.

But... The pose accuracy is *not* better than what we were getting with the
UR44, perhaps worse.  So far I have only tested with the "small" calibration,
either Rz only, or RzRyRz (dipole only)( And evaluated with various data,
either one of the "small" files, or an Rz big file.

The story is roughly similar with different test data.  With the three-fixture
calibration (vs Rz only), the error seems smoothed out more across the
workspace, not so concentrated along the -Y -Z edge.  Also (at least using the
Rz only big test data) it is clear that coupling from Rz to position is the
big contributor to position error.  That is, there is relatively little
tendency toward a general translation nonlinearity.  That is, the translation
errors at different Rz but the same XYZ are splayed out in all directions
(according to Rz), and not trending in a particular direction (independent of
Rz).

Y and Z error (from Rz cross coupling) are considerably larger than X.  Y
coordinate induced effect creates Y dispersion by Rz, and likewise Z creates Z
dispersion.

I tried quantifying the error pattern as a function of the desired pose, using
covariance, but it is not showing such a strong effect, I think perhaps
because the errors are splaying out somewhat evenly in all directions,
potentially cancelling out, and also the pattern of error magnitude increasing
away from the workspace center is a U-shape relation of error to position, so
is nonlinear.


What could be causing the calibration problem?

[A] Source side problems:
  (1) Coil nonideality, either as-built, or the dipole approximation
  (2) Coil interaction

[B] Sensor side problems:
  (1) Coil interaction
  (2) Coil nonideality, either as-built, or the dipole approximation

[C] Input issues:
  (1) Input load causing sensor coil interaction
  (2) Output -> input coupling inside the box
  (3) Input nonlinearity of measurement

[D] Environment:
  (1) magnetic interference (other than from coils)  The steel box itself?

[E] Ground truth problem:
  (1) error in stage kinematics: our command is wrong, or our expected result
      pose is wrong 
  (2) hardware problem in stage (much less likely)
  (3) motion_server problem

[F] Code problem:
  (1) Error in dipole forward kinematics (doesn't seem too likely)
  (2) Error in pose utilities
  (3) Labview signal processing or logging problem.  Is data stable during
      point data averaging?  Synch problem, increase settling time

[G] Physical/design:
  (1) Does error increase in configurations which are somehow unfavorable for
      the pose solution?  eg. something like singularity or observability.
  (2) Are outlier or difficult measurements throwing off the calibration
      process?
       ==> How are calibration residuals affected by pose?

[H] testing methods:
  (1) Is fixture pose optimization having a non-obvious effect?
       ==> Try using the original calibration fixture pose.


Thoughts:

[A](1), [B](2):
It doesn't make sense that coil nonideality would cause error to increase with
increasing source->sensor distance, since the dipole approximation improves
with distance.  Coil nonideality would almost certainly be larger for the
source, because the coils are larger.
 ==> Does error increase with distance?  How can we characterize the error
     variation? Magnitude of coupling or max coupling?
(The X effect on Rz coupling to Y,Z does seem to increase at lower X, eg. closer)

[C](2): coupling strength (distance) vs. error is also a test for inside-box
coupling, which would be most significant when the actual coupling is quite
small.

[G](1): More generally, look for any pattern in the couplings associated with
error.

[A](2) source cross coupling:
Not too keen on this because this seems to have been greatly reduced, and yet
did not help.
 ==> Take calibration and test data w/o source coupling compensation

(FWIW, the sensor moment non-orthogonality is now about the same as for the
source, a degree or so.  For the sensor, the moments trend away from the
adjacent coils, which is what you would expect for a conductive interferer.)

[B], [C]:
The dominant contribution to error from Rz suggests a sensor referred problem.
But we aren't rotating the source, so who knows what would happen then.
 ==> Take test data with source moved/rotated.  Unlikely to help, except
     perhaps for [D](1), but good to know, and we can do it now using
     check_poses().
 ==> Measure rotational response of coupling. eg. Z sensor coupling should not
     change with Rz.  If it does, then this really looks like a sensor error
     (like coil interaction).  But with off-axis moments, some variation is
     expected.  Can also do this test on X, Y coils in the other fixturings
     (but the sensor seems very symmetric).

[C](2):
Definitely investigate sensor coil interaction, which is one of the
few things I can think of that could explain the ILEMT box being worse (if it
is worse).
 ==> What is the effect of an extra sensor coil moved near the sensor?  Open,
     shorted, C load.
 ==> Any effect on coupling if we disconnect the other sensor axes from the
     input?
 ==> How does C load impedance compare to sensor output impedance?

[D](1):
 ==> Try moving the source, the box, the whole setup across the room, ... 
 ==> Check out low-rate calibration.  Is this better, worse, or the about the
     same? 
 ==> Sniff for interference using the old board test fixture.
 ==> Would be nice to have ilemt_ui feature to visualize small changes in
     field vector orientation.

[E](1): ground truth kinematics error:
 ==> Eyball desired pose
 ==> Some sort of round-trip check on the desired pose kinematics
 ==> We had that problem, with the new Corke toolbox not working, which we never
     investigated.  There could be a problem in our utilities, as well as the
     main code.
 ==> Eyeball/test fk_pose_calculation() and vector2tr()

[E](2) stage hardware:
 ==> Test for any mechanical XY motion as Rz is changed, when off center in XY
     plane.  (Already did this to some degree).
 ==> Don't think motion server actually errors if goal pose is not reached,
     though IIRC if there is a really big error then the labview API will error.

[F](1) dipole forward kinematics:
 ==> Test FK using synthetic data

General investigation:
 ==> Look at error visualizations directly incorporating rotation.  The
     linearity test cross coupling may be useful.  Also scatter plots
 ==> Try changing source/sensor fixture positioning so that we use only the
     +X+Y+Z sector.
 ==> Do we get substantially the same data on repeated identical collection
     runs?  With and without refixturing?
 ==> Matlab code issues should not change between old and new hardware.
 ==> Why does the X input seem inverted?  Might be a software problem.


Specific actions/tests:

High priority tests in lab:
 -- Check sensor coil interaction with extra coil, loaded
 -- Get data without source coupling compensation
 -- Try moving the box, wire, etc, look for effect on ilemt_ui
     ==> Effect of tipping box is nil, small effect when slid back off its
         rear feet, down onto motion rack. 
 -- Set up camera to monitor remote stage operation
 -- Try taking data in only the +X+Y+Z sector.  Rotate source so that the
    diagonal source coil symmetry axis is toward the workspace center.

High priority investigation:
 -- Is accuracy actually worse with new box, compared to Sayan's data?
    Sensor load and box out->in coupling are the most obvious ways that things
    could have gotten worse.  Or if source coupling compensation is actually
    bad.  Current results seem broadly similar to what Claudia got.  The lower
    error Claudia reported is at least partly explained by how we subsetted
    the data, IIRC removing the outer -Y plane.
 -- Look at pose error vs. coupling strength, or more generally, any coupling
    pattern related to error.
 -- Try low rate calibration

Other:
 ==> How are calibration residuals affected by pose?
 ==> Try using the original calibration fixture pose. (in check_poses)
 ==> Measure rotational response of coupling. eg. Z sensor coupling should not
     change with Rz.
[Not exhaustive, see all the ==> above]

Error checks to add:
 -- Propagate ilemt_ui errors (clip) into stage_calibration
 -- Check for excess final position error in motion_server.
 -- Add zero poses at beginning and end of test patterns for drift/bump
    check. 


[24 Apr 21]

Axis offsets:
-2.72	1.552	-3.8	0	0	1.4

Stage alignment check.

Alignment of fixture vertical with stage Z, proxy for normality between
fixture and Rz axis (which we are assuming is parallel to the Z translation
axis).  (Stage Rz @ 90 degrees)

Rx via 25mm Z move, indicated on back of post top mount:
    3 um

Ry via 30mm Z move, indicated on side of fixture post
    125 um


Rz alignment runout, taken at +90 Rz, -90 Rz and 0
	90:  0
	0:   0.031
	-90: 0.060

So basically it is off 30 um in both X and Y.  This is a measure of how
accurately the Rz axis intersects Rx Ry (with some assumption about the
accuracy of the fixtures).  Any non-intersection creates a
rotation->translation moment of the mismatch magnitude.

These alignments all seem fairly reasonable.  The only one that kind of rises
to the level of adjustment is the Ry alignment (pole sideways tip).  But this
has been very soft in the past, difficult to get it to stay below 100 um.
Now, these alignments could certainly contribute 100's of um error across the
workspace, which is a problem for evaluating the desired performance, but
can't explain the 

The Rz runout is going to cause an error of basically that runout. Simple
angular misalignment of the fixture wrt. the stage translation axes is not a
source of error, since the can be absorbed into the fixture transform.  But
non-normality of Rz with Rz Ry is also an error source.  This creates a
magnified error at the edge of the workspace because the points generated by
Rz rotation lie in a different plane that the fixture XY plane.  I guess this
is magnified by the moment ratio of the motion offset vs. the runout
measurment distance.  So over +/-50 mm we would expect about +/- 200 um
above/below the XY plane.

The same magnification would apply to any Rx Ry non-orthogonality (which so
far I have assumed is negligible).


[22 Apr 21]

I got calibration sort of working with data from the ILEMT box.  There seems
to be a sign flip on the sensor X, which is causing both the source and sensor
X moments to be sign flipped.  I recall that this was true with the UR44 also,
and I was negating the X signal in the UR44 settings.

The result calibration is very "pretty", with the off-axis components in the
source moments greatly reduced, and the source fixture also more nearly
aligned in rotation.  The sensor moment magnitudes are almost exactly the same
(because there are no gain knobs).

This is so far only working with the single Z fixturing.  Also, with Sayan's
cal_3_8 data using the UR44, I notice that using Z only gives a much lower
residual.  I am suspicious that I did not do the stage Rz alignment correctly,
since we restarted calibration work with Sayan.  Need to check that the Rz
motion is nulled when moving the stage in "Pose" mode, I had forgotten about
this distinction, and motion_ui defaults to "Absolute axis".


[20 Apr 21]

I did mechanical realignment of the stage.  For the stage vertical and Rz
zero, we were within maybe 500 microns or better on the sweeps of 50-100 mm.
The Rx XY position alignment, which I think is most critical, was off by
around 350 microns.
 ==> Getting the sensor mount zeroed wrt. Rz 0 does not matter at all, because
     we can fold that into the sensor fixture.  Getting the mount vertical is
     modestly important so that the Rz axis is orthogonal to Rx Ry.

What are we depending on for the Rx Ry refixturing to work?  I think it's
basically that the XYZ axes intersect and are orthogonal, where the X and Y
axis location are defined by the center of rotation of the sensor fixture.
Maybe the sensor fixture translation can absorb some of the XY offset of the
Rz axis?  IDK I think there is a problem because of the sequential kinematic
order, but we are simulating Rz being after translation in the kinematic
chain.

My feel is that we are lucky if our accuracy is 100 microns, and 200-300 is
more likely.  The pole is just super easy to bump even 100 microns sideways,
and during a Rz move the pole end tweaks by 10's of microns (though it seems
to settle back).

But at the level of error (mm max) we have gotten so far, I don't think the
ground truth accuracy is limiting.
 ==> With the revived test code with the fixture transform optimization, I can
     try accuracy test with just one fixturing.  This will avoid any
     refixturing error.
